services:
  # Base de datos vectorial ChromaDB
  chromadb:
    image: chromadb/chroma:latest
    container_name: financial-chromadb
    ports:
      - "8001:8000"
    volumes:
      - chromadb_data:/chroma/chroma
      - ./chroma_config:/chroma/config
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - PERSIST_DIRECTORY=/chroma/chroma
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - financial-network

  # Servicio de ingesta de documentos
  ingestion:
    build:
      context: .
      dockerfile: financial-ml/ingestion/Dockerfile
    container_name: financial-ingestion
    env_file: .env
    environment:
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - PYTHONPATH=/app
    volumes:
      - ./financial-ml:/app/financial-ml
      - ./data:/app/data
      - chromadb_data:/app/chroma_db
    working_dir: /app
    command: ["python", "-u", "financial-ml/ingestion/process_s3_documents.py"]
    depends_on:
      chromadb:
        condition: service_healthy
    networks:
      - financial-network
    restart: "no"  # Solo ejecuta una vez
    profiles:
      - ingestion  # Perfil para ejecutar solo cuando sea necesario

  # Backend API (FastAPI)
  backend:
    build:
      context: .
      dockerfile: financial-backend/Dockerfile
    container_name: financial-backend
    ports:
      - "8000:8000"
    env_file: .env
    environment:
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - CHROMA_DB_PATH=/app/chroma_db
      - PYTHONPATH=/app
      - ENVIRONMENT=production
    volumes:
      - ./financial-backend:/app/financial-backend
      - ./financial-ml:/app/financial-ml
      - chromadb_data:/app/chroma_db
    working_dir: /app
    command: ["uvicorn", "financial-backend.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    depends_on:
      chromadb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - financial-network
    restart: unless-stopped

  # Frontend (React)
  frontend:
    build:
      context: ./financial-frontend
      dockerfile: Dockerfile
    container_name: financial-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=production
    volumes:
      - ./financial-frontend/src:/app/src
      - ./financial-frontend/public:/app/public
      - /app/node_modules  # Volumen anónimo para node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - financial-network
    restart: unless-stopped
    profiles:
      - frontend

  # Nginx como reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: financial-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - financial-network
    restart: unless-stopped
    profiles:
      - production

  # Redis para caché (opcional)
  redis:
    image: redis:7-alpine
    container_name: financial-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - financial-network
    restart: unless-stopped
    profiles:
      - cache

  # Servicio para monitoreo de logs
  logs:
    image: grafana/promtail:latest
    container_name: financial-logs
    volumes:
      - /var/log:/var/log:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - financial-network
    profiles:
      - monitoring

volumes:
  chromadb_data:
    driver: local
  redis_data:
    driver: local

networks:
  financial-network:
    driver: bridge